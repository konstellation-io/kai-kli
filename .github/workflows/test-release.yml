name: Test and Release

on:
  push:
    branches-ignore:
      - "v*"
    tags-ignore:
      - v*

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Go lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: .
          args: --timeout 5m

  tests:
    strategy:
      matrix:
        go-version: [ 1.20.x ]
        platform: [ macos-latest, ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run unit tests
        run: |
          go test -coverprofile="${{ matrix.platform }}_coverage-unit.out" -covermode=atomic -coverpkg=./... ./... --tags=unit
          go tool cover -func="${{ matrix.platform }}_coverage.out"

      - name: Run integration tests
        run: |
          go test -coverprofile="${{ matrix.platform }}_coverage-integration.out" -covermode=atomic -coverpkg=./... ./... --tags=integration
          go tool cover -func="${{ matrix.platform }}_coverage.out"

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}_coverage
          path: ${{ matrix.platform }}_coverage.out

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v3
      - run: git fetch --prune --unshallow

      - name: Download coverage report
        uses: actions/download-artifact@v1
        with:
          name: ubuntu-latest_coverage

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  release:
    runs-on: ubuntu-latest
    if : github.ref_name == 'main'
    needs: coverage
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
    
      - name: Nyx publish
        id: nyx-publish
        uses: mooltiverse/nyx-github-action@main
        with:
          command: 'publish'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
      