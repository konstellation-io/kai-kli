// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kai "github.com/konstellation-io/kli/api/kai"
	entity "github.com/konstellation-io/kli/internal/entity"
	configuration "github.com/konstellation-io/kli/internal/services/configuration"
	krt "github.com/konstellation-io/krt/pkg/krt"
)

// MockRenderer is a mock of Renderer interface.
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
}

// MockRendererMockRecorder is the mock recorder for MockRenderer.
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance.
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return m.recorder
}

// RenderCallout mocks base method.
func (m *MockRenderer) RenderCallout(v *entity.Version) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderCallout", v)
}

// RenderCallout indicates an expected call of RenderCallout.
func (mr *MockRendererMockRecorder) RenderCallout(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderCallout", reflect.TypeOf((*MockRenderer)(nil).RenderCallout), v)
}

// RenderConfiguration mocks base method.
func (m *MockRenderer) RenderConfiguration(scope string, config map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderConfiguration", scope, config)
}

// RenderConfiguration indicates an expected call of RenderConfiguration.
func (mr *MockRendererMockRecorder) RenderConfiguration(scope, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderConfiguration", reflect.TypeOf((*MockRenderer)(nil).RenderConfiguration), scope, config)
}

// RenderKliVersion mocks base method.
func (m *MockRenderer) RenderKliVersion(version, buildDate string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderKliVersion", version, buildDate)
}

// RenderKliVersion indicates an expected call of RenderKliVersion.
func (mr *MockRendererMockRecorder) RenderKliVersion(version, buildDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderKliVersion", reflect.TypeOf((*MockRenderer)(nil).RenderKliVersion), version, buildDate)
}

// RenderLogin mocks base method.
func (m *MockRenderer) RenderLogin(serverName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderLogin", serverName)
}

// RenderLogin indicates an expected call of RenderLogin.
func (mr *MockRendererMockRecorder) RenderLogin(serverName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderLogin", reflect.TypeOf((*MockRenderer)(nil).RenderLogin), serverName)
}

// RenderLogout mocks base method.
func (m *MockRenderer) RenderLogout(serverName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderLogout", serverName)
}

// RenderLogout indicates an expected call of RenderLogout.
func (mr *MockRendererMockRecorder) RenderLogout(serverName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderLogout", reflect.TypeOf((*MockRenderer)(nil).RenderLogout), serverName)
}

// RenderLogs mocks base method.
func (m *MockRenderer) RenderLogs(productID string, logs []entity.Log, outFormat entity.LogOutFormat, showAllLabels bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderLogs", productID, logs, outFormat, showAllLabels)
}

// RenderLogs indicates an expected call of RenderLogs.
func (mr *MockRendererMockRecorder) RenderLogs(productID, logs, outFormat, showAllLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderLogs", reflect.TypeOf((*MockRenderer)(nil).RenderLogs), productID, logs, outFormat, showAllLabels)
}

// RenderProcessRegistered mocks base method.
func (m *MockRenderer) RenderProcessRegistered(process *entity.RegisteredProcess) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderProcessRegistered", process)
}

// RenderProcessRegistered indicates an expected call of RenderProcessRegistered.
func (mr *MockRendererMockRecorder) RenderProcessRegistered(process interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderProcessRegistered", reflect.TypeOf((*MockRenderer)(nil).RenderProcessRegistered), process)
}

// RenderProcesses mocks base method.
func (m *MockRenderer) RenderProcesses(processes []krt.Process) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderProcesses", processes)
}

// RenderProcesses indicates an expected call of RenderProcesses.
func (mr *MockRendererMockRecorder) RenderProcesses(processes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderProcesses", reflect.TypeOf((*MockRenderer)(nil).RenderProcesses), processes)
}

// RenderProductBinded mocks base method.
func (m *MockRenderer) RenderProductBinded(product *kai.Product) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderProductBinded", product)
}

// RenderProductBinded indicates an expected call of RenderProductBinded.
func (mr *MockRendererMockRecorder) RenderProductBinded(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderProductBinded", reflect.TypeOf((*MockRenderer)(nil).RenderProductBinded), product)
}

// RenderProductCreated mocks base method.
func (m *MockRenderer) RenderProductCreated(product string, server *configuration.Server, initLocal bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderProductCreated", product, server, initLocal)
}

// RenderProductCreated indicates an expected call of RenderProductCreated.
func (mr *MockRendererMockRecorder) RenderProductCreated(product, server, initLocal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderProductCreated", reflect.TypeOf((*MockRenderer)(nil).RenderProductCreated), product, server, initLocal)
}

// RenderProducts mocks base method.
func (m *MockRenderer) RenderProducts(products []kai.Product) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderProducts", products)
}

// RenderProducts indicates an expected call of RenderProducts.
func (mr *MockRendererMockRecorder) RenderProducts(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderProducts", reflect.TypeOf((*MockRenderer)(nil).RenderProducts), products)
}

// RenderRegisteredProcesses mocks base method.
func (m *MockRenderer) RenderRegisteredProcesses(registries []*entity.RegisteredProcess) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderRegisteredProcesses", registries)
}

// RenderRegisteredProcesses indicates an expected call of RenderRegisteredProcesses.
func (mr *MockRendererMockRecorder) RenderRegisteredProcesses(registries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderRegisteredProcesses", reflect.TypeOf((*MockRenderer)(nil).RenderRegisteredProcesses), registries)
}

// RenderServers mocks base method.
func (m *MockRenderer) RenderServers(servers []*configuration.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderServers", servers)
}

// RenderServers indicates an expected call of RenderServers.
func (mr *MockRendererMockRecorder) RenderServers(servers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderServers", reflect.TypeOf((*MockRenderer)(nil).RenderServers), servers)
}

// RenderTriggers mocks base method.
func (m *MockRenderer) RenderTriggers(triggers []entity.TriggerEndpoint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderTriggers", triggers)
}

// RenderTriggers indicates an expected call of RenderTriggers.
func (mr *MockRendererMockRecorder) RenderTriggers(triggers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderTriggers", reflect.TypeOf((*MockRenderer)(nil).RenderTriggers), triggers)
}

// RenderVersion mocks base method.
func (m *MockRenderer) RenderVersion(productID string, v *entity.Version) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderVersion", productID, v)
}

// RenderVersion indicates an expected call of RenderVersion.
func (mr *MockRendererMockRecorder) RenderVersion(productID, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderVersion", reflect.TypeOf((*MockRenderer)(nil).RenderVersion), productID, v)
}

// RenderVersions mocks base method.
func (m *MockRenderer) RenderVersions(productID string, versions []*entity.Version) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderVersions", productID, versions)
}

// RenderVersions indicates an expected call of RenderVersions.
func (mr *MockRendererMockRecorder) RenderVersions(productID, versions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderVersions", reflect.TypeOf((*MockRenderer)(nil).RenderVersions), productID, versions)
}

// RenderWorkflows mocks base method.
func (m *MockRenderer) RenderWorkflows(workflows []krt.Workflow) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderWorkflows", workflows)
}

// RenderWorkflows indicates an expected call of RenderWorkflows.
func (mr *MockRendererMockRecorder) RenderWorkflows(workflows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderWorkflows", reflect.TypeOf((*MockRenderer)(nil).RenderWorkflows), workflows)
}
