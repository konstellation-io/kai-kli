// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	processregistry "github.com/konstellation-io/kli/api/processregistry"
	configuration "github.com/konstellation-io/kli/internal/services/configuration"
	krt "github.com/konstellation-io/krt/pkg/krt"
)

// MockRenderer is a mock of Renderer interface.
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
}

// MockRendererMockRecorder is the mock recorder for MockRenderer.
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance.
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return m.recorder
}

// RenderConfiguration mocks base method.
func (m *MockRenderer) RenderConfiguration(scope string, config map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderConfiguration", scope, config)
}

// RenderConfiguration indicates an expected call of RenderConfiguration.
func (mr *MockRendererMockRecorder) RenderConfiguration(scope, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderConfiguration", reflect.TypeOf((*MockRenderer)(nil).RenderConfiguration), scope, config)
}

// RenderProcesses mocks base method.
func (m *MockRenderer) RenderProcesses(processes []krt.Process) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderProcesses", processes)
}

// RenderProcesses indicates an expected call of RenderProcesses.
func (mr *MockRendererMockRecorder) RenderProcesses(processes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderProcesses", reflect.TypeOf((*MockRenderer)(nil).RenderProcesses), processes)
}

// RenderRegisteredProcesses mocks base method.
func (m *MockRenderer) RenderRegisteredProcesses(registries []processregistry.RegisteredProcess) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderRegisteredProcesses", registries)
}

// RenderRegisteredProcesses indicates an expected call of RenderRegisteredProcesses.
func (mr *MockRendererMockRecorder) RenderRegisteredProcesses(registries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderRegisteredProcesses", reflect.TypeOf((*MockRenderer)(nil).RenderRegisteredProcesses), registries)
}

// RenderServers mocks base method.
func (m *MockRenderer) RenderServers(servers []configuration.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderServers", servers)
}

// RenderServers indicates an expected call of RenderServers.
func (mr *MockRendererMockRecorder) RenderServers(servers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderServers", reflect.TypeOf((*MockRenderer)(nil).RenderServers), servers)
}

// RenderWorkflows mocks base method.
func (m *MockRenderer) RenderWorkflows(workflows []krt.Workflow) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderWorkflows", workflows)
}

// RenderWorkflows indicates an expected call of RenderWorkflows.
func (mr *MockRendererMockRecorder) RenderWorkflows(workflows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderWorkflows", reflect.TypeOf((*MockRenderer)(nil).RenderWorkflows), workflows)
}
