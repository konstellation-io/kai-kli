// Code generated by MockGen. DO NOT EDIT.
// Source: process_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kli/internal/entity"
	configuration "github.com/konstellation-io/kli/internal/services/configuration"
)

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAPIClient) Delete(server *configuration.Server, productID, processID, version string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", server, productID, processID, version)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAPIClientMockRecorder) Delete(server, productID, processID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAPIClient)(nil).Delete), server, productID, processID, version)
}

// DeletePublic mocks base method.
func (m *MockAPIClient) DeletePublic(server *configuration.Server, processID, version string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublic", server, processID, version)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublic indicates an expected call of DeletePublic.
func (mr *MockAPIClientMockRecorder) DeletePublic(server, processID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublic", reflect.TypeOf((*MockAPIClient)(nil).DeletePublic), server, processID, version)
}

// List mocks base method.
func (m *MockAPIClient) List(server *configuration.Server, productID, processName, version, processType string) ([]*entity.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", server, productID, processName, version, processType)
	ret0, _ := ret[0].([]*entity.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAPIClientMockRecorder) List(server, productID, processName, version, processType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAPIClient)(nil).List), server, productID, processName, version, processType)
}

// Register mocks base method.
func (m *MockAPIClient) Register(server *configuration.Server, processFile *os.File, productID, processID, processType, version string) (*entity.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", server, processFile, productID, processID, processType, version)
	ret0, _ := ret[0].(*entity.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAPIClientMockRecorder) Register(server, processFile, productID, processID, processType, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAPIClient)(nil).Register), server, processFile, productID, processID, processType, version)
}

// RegisterPublic mocks base method.
func (m *MockAPIClient) RegisterPublic(server *configuration.Server, processFile *os.File, processID, processType, version string) (*entity.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPublic", server, processFile, processID, processType, version)
	ret0, _ := ret[0].(*entity.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPublic indicates an expected call of RegisterPublic.
func (mr *MockAPIClientMockRecorder) RegisterPublic(server, processFile, processID, processType, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPublic", reflect.TypeOf((*MockAPIClient)(nil).RegisterPublic), server, processFile, processID, processType, version)
}
