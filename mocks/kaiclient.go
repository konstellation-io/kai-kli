// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	kai "github.com/konstellation-io/kli/api/kai"
	mock "github.com/stretchr/testify/mock"

	processregistry "github.com/konstellation-io/kli/api/processregistry"
)

// MockKaiClient is an autogenerated mock type for the Client type
type MockKaiClient struct {
	mock.Mock
}

type MockKaiClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKaiClient) EXPECT() *MockKaiClient_Expecter {
	return &MockKaiClient_Expecter{mock: &_m.Mock}
}

// ProcessRegistry provides a mock function with given fields:
func (_m *MockKaiClient) ProcessRegistry() processregistry.APIClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProcessRegistry")
	}

	var r0 processregistry.APIClient
	if rf, ok := ret.Get(0).(func() processregistry.APIClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(processregistry.APIClient)
		}
	}

	return r0
}

// MockKaiClient_ProcessRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessRegistry'
type MockKaiClient_ProcessRegistry_Call struct {
	*mock.Call
}

// ProcessRegistry is a helper method to define mock.On call
func (_e *MockKaiClient_Expecter) ProcessRegistry() *MockKaiClient_ProcessRegistry_Call {
	return &MockKaiClient_ProcessRegistry_Call{Call: _e.mock.On("ProcessRegistry")}
}

func (_c *MockKaiClient_ProcessRegistry_Call) Run(run func()) *MockKaiClient_ProcessRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKaiClient_ProcessRegistry_Call) Return(_a0 processregistry.APIClient) *MockKaiClient_ProcessRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKaiClient_ProcessRegistry_Call) RunAndReturn(run func() processregistry.APIClient) *MockKaiClient_ProcessRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// ProductClient provides a mock function with given fields:
func (_m *MockKaiClient) ProductClient() kai.ProductClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProductClient")
	}

	var r0 kai.ProductClient
	if rf, ok := ret.Get(0).(func() kai.ProductClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kai.ProductClient)
		}
	}

	return r0
}

// MockKaiClient_ProductClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProductClient'
type MockKaiClient_ProductClient_Call struct {
	*mock.Call
}

// ProductClient is a helper method to define mock.On call
func (_e *MockKaiClient_Expecter) ProductClient() *MockKaiClient_ProductClient_Call {
	return &MockKaiClient_ProductClient_Call{Call: _e.mock.On("ProductClient")}
}

func (_c *MockKaiClient_ProductClient_Call) Run(run func()) *MockKaiClient_ProductClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKaiClient_ProductClient_Call) Return(_a0 kai.ProductClient) *MockKaiClient_ProductClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKaiClient_ProductClient_Call) RunAndReturn(run func() kai.ProductClient) *MockKaiClient_ProductClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKaiClient creates a new instance of MockKaiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKaiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKaiClient {
	mock := &MockKaiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
